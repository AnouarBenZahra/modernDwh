{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "meetupADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Transform User')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFUser",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFuser",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "lake"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFuser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformComment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFComments",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFComments",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "lake"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFComments')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDboComment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "_Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_CreationDate",
						"type": "nvarchar"
					},
					{
						"name": "_PostId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_Score",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_Text",
						"type": "nvarchar"
					},
					{
						"name": "_UserDisplayName",
						"type": "nvarchar"
					},
					{
						"name": "_UserId",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Comments"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDimComments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CommentId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CommentSk",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CreationDate",
						"type": "nvarchar"
					},
					{
						"name": "PostId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Score",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Text",
						"type": "nvarchar"
					},
					{
						"name": "UserDisplayName",
						"type": "nvarchar"
					},
					{
						"name": "UserId",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dmt",
					"table": "DimComments"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFComments')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SynapseDboComment",
								"type": "DatasetReference"
							},
							"name": "srcComments"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseDimComments",
								"type": "DatasetReference"
							},
							"name": "dstComment"
						}
					],
					"transformations": [
						{
							"name": "upsert"
						},
						{
							"name": "DerivedColumnSk"
						}
					],
					"script": "\n\nsource(output(\n\t\t{_Id} as long,\n\t\t{_CreationDate} as string,\n\t\t{_PostId} as long,\n\t\t{_Score} as long,\n\t\t{_Text} as string,\n\t\t{_UserDisplayName} as string,\n\t\t{_UserId} as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcComments\nDerivedColumnSk alterRow(upsertIf(true())) ~> upsert\nsrcComments derive(CommentSK = toInteger(replace(toString(currentDate()), '-', ''))) ~> DerivedColumnSk\nupsert sink(input(\n\t\tCommentId as long,\n\t\tCommentSk as long,\n\t\tCreationDate as string,\n\t\tPostId as long,\n\t\tScore as long,\n\t\tText as string,\n\t\tUserDisplayName as string,\n\t\tUserId as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['_Id'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tCommentId = {_Id},\n\t\tCommentSk = CommentSK,\n\t\tCreationDate = {_CreationDate},\n\t\tPostId = {_PostId},\n\t\tScore = {_Score},\n\t\tText = {_Text},\n\t\tUserDisplayName = {_UserDisplayName},\n\t\tUserId = {_UserId}\n\t)) ~> dstComment"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SynapseDboComment')]",
				"[concat(variables('factoryId'), '/datasets/SynapseDimComments')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFuser')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SynapseDboUser",
								"type": "DatasetReference"
							},
							"name": "srcUser"
						},
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "DimUser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "UpdateDestDimUser"
						},
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "InsertDestDimUser"
						},
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "dstUser"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "Join"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "AlterRowUpsert"
						},
						{
							"name": "DerivedColumnUserSK"
						}
					],
					"script": "\n\nsource(output(\n\t\t{_AccountId} as long,\n\t\t{_CreationDate} as string,\n\t\t{_DisplayName} as string,\n\t\t{_DownVotes} as long,\n\t\t{_Id} as long,\n\t\t{_LastAccessDate} as string,\n\t\t{_Location} as string,\n\t\t{_ProfileImageUrl} as string,\n\t\t{_Reputation} as long,\n\t\t{_UpVotes} as long,\n\t\t{_Views} as long,\n\t\t{_WebsiteUrl} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcUser\nsource(output(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimUser\nDerivedColumnUserSK split(DisplayName!={_DisplayName}\r\n&&\r\n{_Id}==UserId,\n\tUserId=={_Id} && {_Location} != Location,\n\tdisjoint: false) ~> ConditionalSplit@(SCD1, SCD2, ELSE)\nsrcUser, DimUser join({_Id} == UserId,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> Join\nConditionalSplit@SCD1 alterRow(updateIf(true())) ~> AlterRow\nConditionalSplit@SCD2 alterRow(upsertIf(true())) ~> AlterRowUpsert\nJoin derive(userSK = replace(toString(currentDate()), '-', '')) ~> DerivedColumnUserSK\nAlterRow sink(input(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['UserId'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tUserId = {_Id},\n\t\tUserSk = {_AccountId},\n\t\tReputation = {_Reputation},\n\t\tCreationDate = {_CreationDate},\n\t\tDisplayName = {_DisplayName},\n\t\tLastAccessDate = {_LastAccessDate},\n\t\tWebsiteUrl = {_WebsiteUrl},\n\t\tLocation = {_Location},\n\t\tUpVotes = {_UpVotes},\n\t\tDownVotes = {_DownVotes},\n\t\tProfileImageUrl = {_ProfileImageUrl}\n\t)) ~> UpdateDestDimUser\nAlterRowUpsert sink(input(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['UserId'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tUserId = {_Id},\n\t\tUserSk = ConditionalSplit@SCD2@UserSk,\n\t\tReputation = {_Reputation},\n\t\tCreationDate = {_CreationDate},\n\t\tDisplayName = {_DisplayName},\n\t\tLastAccessDate = {_LastAccessDate},\n\t\tWebsiteUrl = {_WebsiteUrl},\n\t\tLocation = {_Location},\n\t\tUpVotes = {_UpVotes},\n\t\tDownVotes = {_DownVotes},\n\t\tProfileImageUrl = {_ProfileImageUrl}\n\t)) ~> InsertDestDimUser\nConditionalSplit@ELSE sink(input(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tUserId = {_Id},\n\t\tUserSk = ConditionalSplit@ELSE@UserSk,\n\t\tReputation = {_Reputation},\n\t\tCreationDate = {_CreationDate},\n\t\tDisplayName = {_DisplayName},\n\t\tLastAccessDate = {_LastAccessDate},\n\t\tWebsiteUrl = {_WebsiteUrl},\n\t\tLocation = {_Location},\n\t\tUpVotes = {_UpVotes},\n\t\tDownVotes = {_DownVotes},\n\t\tProfileImageUrl = {_ProfileImageUrl}\n\t)) ~> dstUser"
				}
			},
			"dependsOn": []
		}
	]
}