{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "meetupADF"
		},
		"ABFS_Lake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ABFS_Lake'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDatabricks_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"ABFS_Lake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://meetuptunis.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ABFS_Lake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ABFS_Lake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ABFS_Lake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://westeurope.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks_accessToken')]"
					},
					"existingClusterId": "1223-151257-knell686"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/COL - Comments')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NBK - LoadComments",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/LoadComments"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Collecte"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/COL - Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NBK - LoadUsers",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/LoadUsers"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Collecte"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetComments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Curated/20191224/Comments.parquet",
						"container": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "_CreationDate",
						"type": "UTF8"
					},
					{
						"name": "_Id",
						"type": "INT64"
					},
					{
						"name": "_PostId",
						"type": "INT64"
					},
					{
						"name": "_Score",
						"type": "INT64"
					},
					{
						"name": "_Text",
						"type": "UTF8"
					},
					{
						"name": "_UserDisplayName",
						"type": "UTF8"
					},
					{
						"name": "_UserId",
						"type": "INT64"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDboComment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "_Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_CreationDate",
						"type": "nvarchar"
					},
					{
						"name": "_PostId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_Score",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_Text",
						"type": "nvarchar"
					},
					{
						"name": "_UserDisplayName",
						"type": "nvarchar"
					},
					{
						"name": "_UserId",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Comments"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDboUser')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "_AccountId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_CreationDate",
						"type": "nvarchar"
					},
					{
						"name": "_DisplayName",
						"type": "nvarchar"
					},
					{
						"name": "_DownVotes",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_LastAccessDate",
						"type": "nvarchar"
					},
					{
						"name": "_Location",
						"type": "nvarchar"
					},
					{
						"name": "_ProfileImageUrl",
						"type": "nvarchar"
					},
					{
						"name": "_Reputation",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_UpVotes",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_Views",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "_WebsiteUrl",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDimComments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CommentId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CommentSk",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CreationDate",
						"type": "nvarchar"
					},
					{
						"name": "PostId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Score",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Text",
						"type": "nvarchar"
					},
					{
						"name": "UserDisplayName",
						"type": "nvarchar"
					},
					{
						"name": "UserId",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dmt",
					"table": "DimComments"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDimUser')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserSk",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Reputation",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DisplayName",
						"type": "varchar"
					},
					{
						"name": "LastAccessDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WebsiteUrl",
						"type": "varchar"
					},
					{
						"name": "Location",
						"type": "varchar"
					},
					{
						"name": "UpVotes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DownVotes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfileImageUrl",
						"type": "varchar"
					},
					{
						"name": "StartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dmt",
					"table": "DimUser"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseFactComment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "IdUser",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "IdComment",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PostCount",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dmt",
					"table": "FactComments"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/XML_StackOverflowDump')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABFS_Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "StackOverflowDump",
						"fileSystem": "lake"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABFS_Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadComments')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cp- Comments",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "*.parquet",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "TRUNCATE TABLE dbo.Comments",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "_Id",
											"type": "Int64"
										},
										"sink": {
											"name": "_Id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "_CreationDate",
											"type": "String"
										},
										"sink": {
											"name": "_CreationDate",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "_PostId",
											"type": "Int64"
										},
										"sink": {
											"name": "_PostId",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "_Score",
											"type": "Int64"
										},
										"sink": {
											"name": "_Score",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "_Text",
											"type": "String"
										},
										"sink": {
											"name": "_Text",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "_UserDisplayName",
											"type": "String"
										},
										"sink": {
											"name": "_UserDisplayName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "_UserId",
											"type": "Int64"
										},
										"sink": {
											"name": "_UserId",
											"type": "Int64"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ParquetComments",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SynapseDboComment",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "LoadComments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParquetComments')]",
				"[concat(variables('factoryId'), '/datasets/SynapseDboComment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXml - Generic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "XML_StackOverflowDump",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Filter - XML",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(contains(item().name,'.gz'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach - XML Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter - XML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter - XML').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "NTBK - XML 2 Parquet",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/LoadXml-Parquet",
										"baseParameters": {
											"filename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"parquetpath": {
												"value": "@concat('/Curated/'\n,formatDateTime(utcnow(),'yyyyMMdd')\n,'/'\n,replace(item().name,'xml','parquet')\n)",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/XML_StackOverflowDump')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFComments')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SynapseDboComment",
								"type": "DatasetReference"
							},
							"name": "srcComments",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseDimComments",
								"type": "DatasetReference"
							},
							"name": "dstComment"
						}
					],
					"transformations": [],
					"script": "\n\nsource(output(\n\t\t{_Id} as long,\n\t\t{_CreationDate} as string,\n\t\t{_PostId} as long,\n\t\t{_Score} as long,\n\t\t{_Text} as string,\n\t\t{_UserDisplayName} as string,\n\t\t{_UserId} as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcComments\nsrcComments sink(input(\n\t\tCommentId as long,\n\t\tCommentSk as long,\n\t\tCreationDate as string,\n\t\tPostId as long,\n\t\tScore as long,\n\t\tText as string,\n\t\tUserDisplayName as string,\n\t\tUserId as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['_Id'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tCommentSk = {_Id},\n\t\tCreationDate = {_CreationDate},\n\t\tPostId = {_PostId},\n\t\tScore = {_Score},\n\t\tText = {_Text},\n\t\tUserDisplayName = {_UserDisplayName},\n\t\tUserId = {_UserId}\n\t)) ~> dstComment"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SynapseDboComment')]",
				"[concat(variables('factoryId'), '/datasets/SynapseDimComments')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFuser')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SynapseDboUser",
								"type": "DatasetReference"
							},
							"name": "srcUser",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "DimUser",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "UpdateDestDimUser"
						},
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "InsertDestDimUser"
						},
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "dstUser"
						},
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "UpdateOldRows"
						}
					],
					"transformations": [
						{
							"name": "Join"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "AlterInsertNewRows"
						},
						{
							"name": "SelectExisting"
						},
						{
							"name": "FilterActiveRows"
						},
						{
							"name": "AlterUpdateOldRows"
						},
						{
							"name": "DrvStartEndDate"
						},
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "\n\nsource(output(\n\t\t{_AccountId} as long,\n\t\t{_CreationDate} as string,\n\t\t{_DisplayName} as string,\n\t\t{_DownVotes} as long,\n\t\t{_Id} as long,\n\t\t{_LastAccessDate} as string,\n\t\t{_Location} as string,\n\t\t{_ProfileImageUrl} as string,\n\t\t{_Reputation} as long,\n\t\t{_UpVotes} as long,\n\t\t{_Views} as long,\n\t\t{_WebsiteUrl} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> srcUser\nsource(output(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tAccountId as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimUser\nsrcUser, SelectExisting join({_Id} == Existing_UserSk,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join\nConditionalSplit1@SCD1 alterRow(updateIf(true())) ~> AlterRow\nConditionalSplit1@SCD2 alterRow(insertIf(true())) ~> AlterInsertNewRows\nFilterActiveRows select(mapColumn(\n\t\tExisting_UserId = UserId,\n\t\tExisting_UserSk = UserSk,\n\t\tExisting_AccountId = AccountId,\n\t\tExisting_Reputation = Reputation,\n\t\tExisting_CreationDate = CreationDate,\n\t\tExisting_DisplayName = DisplayName,\n\t\tExisting_LastAccessDate = LastAccessDate,\n\t\tExisting_WebsiteUrl = WebsiteUrl,\n\t\tExisting_Location = Location,\n\t\tExisting_UpVotes = UpVotes,\n\t\tExisting_DownVotes = DownVotes,\n\t\tExisting_ProfileImageUrl = ProfileImageUrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectExisting\nDimUser filter(isNull(EndDate)) ~> FilterActiveRows\nConditionalSplit1@SCD2 alterRow(updateIf(true())) ~> AlterUpdateOldRows\nJoin derive(NewStartDate = currentUTC(),\n\t\tNewEndDate = currentUTC()) ~> DrvStartEndDate\nDrvStartEndDate split(!isNull(Existing_UserId)\r\n&& {_Location} != Existing_Location,\n\t!isNull(Existing_UserId)\r\n&&\r\n(\r\n    {_AccountId} != Existing_AccountId\r\n    || {_DisplayName} !=  Existing_DisplayName\r\n),\n\tisNull(Existing_UserId),\n\tdisjoint: false) ~> ConditionalSplit1@(SCD2, SCD1, NewRows)\nAlterRow sink(input(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tAccountId as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['UserSk'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tAccountId = {_AccountId},\n\t\tDisplayName = {_DisplayName},\n\t\tUserSk = {_Id}\n\t)) ~> UpdateDestDimUser\nAlterInsertNewRows sink(input(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tAccountId as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['UserId'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tUserSk = {_Id},\n\t\tReputation = Existing_Reputation,\n\t\tCreationDate = Existing_CreationDate,\n\t\tDisplayName = Existing_DisplayName,\n\t\tLastAccessDate = Existing_LastAccessDate,\n\t\tWebsiteUrl = Existing_WebsiteUrl,\n\t\tLocation = {_Location},\n\t\tUpVotes = Existing_UpVotes,\n\t\tDownVotes = Existing_DownVotes,\n\t\tProfileImageUrl = Existing_ProfileImageUrl,\n\t\tAccountId = Existing_AccountId,\n\t\tStartDate = NewStartDate\n\t)) ~> InsertDestDimUser\nConditionalSplit1@NewRows sink(input(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tAccountId as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tUserSk = {_Id},\n\t\tReputation = {_Reputation},\n\t\tCreationDate = {_CreationDate},\n\t\tDisplayName = {_DisplayName},\n\t\tLastAccessDate = {_LastAccessDate},\n\t\tWebsiteUrl = {_WebsiteUrl},\n\t\tLocation = {_Location},\n\t\tUpVotes = {_UpVotes},\n\t\tDownVotes = {_DownVotes},\n\t\tProfileImageUrl = {_ProfileImageUrl},\n\t\tAccountId = {_AccountId}\n\t)) ~> dstUser\nAlterUpdateOldRows sink(input(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tAccountId as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Existing_UserId'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tEndDate = NewEndDate,\n\t\tUserId = Existing_UserId\n\t)) ~> UpdateOldRows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SynapseDboUser')]",
				"[concat(variables('factoryId'), '/datasets/SynapseDimUser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactComment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SynapseDimUser",
								"type": "DatasetReference"
							},
							"name": "DimUser",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "SynapseDimComments",
								"type": "DatasetReference"
							},
							"name": "DimComments",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseFactComment",
								"type": "DatasetReference"
							},
							"name": "Fact"
						}
					],
					"transformations": [
						{
							"name": "Join"
						},
						{
							"name": "Aggregate"
						}
					],
					"script": "\n\nsource(output(\n\t\tUserId as integer,\n\t\tUserSk as integer,\n\t\tAccountId as integer,\n\t\tReputation as integer,\n\t\tCreationDate as timestamp,\n\t\tDisplayName as string,\n\t\tLastAccessDate as timestamp,\n\t\tWebsiteUrl as string,\n\t\tLocation as string,\n\t\tUpVotes as integer,\n\t\tDownVotes as integer,\n\t\tProfileImageUrl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimUser\nsource(output(\n\t\tCommentId as long,\n\t\tCommentSk as long,\n\t\tCreationDate as string,\n\t\tPostId as long,\n\t\tScore as long,\n\t\tText as string,\n\t\tUserDisplayName as string,\n\t\tUserId as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimComments\nDimUser, DimComments join(UserSk == DimComments@UserId,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join\nJoin aggregate(groupBy(UserSk,\n\t\tCommentSk),\n\tPostCount = count(1)) ~> Aggregate\nAggregate sink(input(\n\t\tIdUser as long,\n\t\tIdComment as long,\n\t\tPostCount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tIdUser = UserSk,\n\t\tIdComment = CommentSk,\n\t\tPostCount\n\t)) ~> Fact"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SynapseDimUser')]",
				"[concat(variables('factoryId'), '/datasets/SynapseDimComments')]",
				"[concat(variables('factoryId'), '/datasets/SynapseFactComment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactComments",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FactComment",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimUser": {},
									"DimComments": {},
									"Fact": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "lake"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "FACT"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FactComment')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		}
	]
}